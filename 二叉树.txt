一、数据结构：
    1.线性表：链表ArrayList LinkedList
    2.栈和队列
    3.串：字符串
    4.数组
    5.树
    6.图
二、树：
    1.定义：n（n>=0）个结点的有限集。在任意一颗非空树中：
        1）有且只有一个根结点 
        2）当n>1时，其余结点可分为m个互不相交的有限集，
        每个集合本身又是一棵树，并且称为根的子树
    2.二叉树：每个节点至多只有两颗子树的树，子树有左右之分，次序不能任意颠倒
    3.二叉树的分类
        1）满二叉树：深度为k且有2的k次幂-1个结点的二叉树
        2）完全二叉树：
        和满二叉树不同的是最后一层不是满的，除了最了一层，其余的k-1层是一个满二叉树，最后一层的结点是从左开始排列的。
        （满二叉树是特殊的完全二叉树，但完全二叉树不一定是满二叉树）
            （1）某个节点没有左子节点，那么肯定也不能有右子节点
            （2）从第1层到第k-1层是一个满二叉树，最后一层的结点从左开始排列。
        3）二叉查找树：（又：二叉搜索树，二叉排序树）它是一 棵空树或同时满足以下条件
            （1）所有子树上面的左节点的值都比根结点要小，右节点的值都比根结点要大 
　　　　    （2）任意结点的左右子树也都是二叉查找树
　　　　    （3）通过中序遍历，将得到的是一个有序的数列
        4）平衡二叉树：它是一棵空树或同时满足以下条件
            （1）它是一个二叉查找树
　　　　    （2）它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
　　　　    （3）当删除、新增、修改节点上的值时，它会通过左旋或右旋的操作使二叉树保持平衡。
        5）红黑树：平衡二叉查找树
            （1）节点是红色或者黑色
            （2）根节点是黑色
            （3）每个叶子的节点都是黑色的空节点（NULL）
            （4）每个红色节点的两个子节点都是黑色的。
            （5）从任意节点到其每个叶子的所有路径都包含相同的黑色节点。
    4.遍历二叉树
        1）前序遍历：根节点->左子树->右子树
        2）中序遍历：左子树->根节点->右子树
        3）后序遍历：左子树->右子树->根节点




